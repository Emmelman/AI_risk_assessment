# src/utils/reasoning_display.py
"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
"""

import os
from typing import Optional
from rich.console import Console
from rich.panel import Panel
from rich.text import Text


def show_profiler_reasoning(agent_name: str, stage: str, content: str):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä–∞ –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    
    Args:
        agent_name: –ò–º—è –∞–≥–µ–Ω—Ç–∞
        stage: –≠—Ç–∞–ø —Ä–∞–±–æ—Ç—ã
        content: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
    """
    
    if os.getenv('SHOW_AGENT_REASONING') != 'true':
        return
        
    console = Console()
    
    stage_emojis = {
        "data_collection": "üìä",
        "data_analysis": "üîç", 
        "llm_call": "ü§ñ",
        "profile_creation": "üéØ",
        "result": "‚úÖ",
        "error": "‚ùå"
    }
    
    emoji = stage_emojis.get(stage, "üß†")
    title = f"{emoji} –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è: {agent_name} - {stage.upper()}"
    
    console.print(Panel(
        content.strip(),
        title=title,
        border_style="cyan",
        padding=(1, 2)
    ))


def show_evaluator_reasoning(agent_name: str, risk_type: str, stage: str, content: str):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤-–æ—Ü–µ–Ω—â–∏–∫–æ–≤
    
    Args:
        agent_name: –ò–º—è –∞–≥–µ–Ω—Ç–∞
        risk_type: –¢–∏–ø —Ä–∏—Å–∫–∞
        stage: –≠—Ç–∞–ø –æ—Ü–µ–Ω–∫–∏
        content: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
    """
    
    if os.getenv('SHOW_AGENT_REASONING') != 'true':
        return
        
    console = Console()
    
    title = f"üß† –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è: {agent_name} - {risk_type.upper()}"
    
    console.print(Panel(
        content.strip(),
        title=title,
        border_style="blue",
        padding=(1, 2)
    ))


def show_critic_reasoning(critic_name: str, evaluation_type: str, content: str):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∫—Ä–∏—Ç–∏–∫–∞
    
    Args:
        critic_name: –ò–º—è –∫—Ä–∏—Ç–∏–∫–∞
        evaluation_type: –¢–∏–ø –æ—Ü–µ–Ω–∏–≤–∞–µ–º–æ–≥–æ —Ä–∏—Å–∫–∞
        content: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
    """
    
    if os.getenv('SHOW_CRITIC_REASONING') != 'true':
        return
        
    console = Console()
    
    title = f"üë®‚Äç‚öñÔ∏è –ö—Ä–∏—Ç–∏–∫: {critic_name} - {evaluation_type.upper()}"
    
    console.print(Panel(
        content.strip(),
        title=title,
        border_style="red",
        padding=(1, 2)
    ))


def enable_all_reasoning():
    """–í–∫–ª—é—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π"""
    os.environ["SHOW_AGENT_REASONING"] = "true"
    os.environ["SHOW_CRITIC_REASONING"] = "true"
    print("üß† –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –≤–∫–ª—é—á–µ–Ω—ã")


def disable_all_reasoning():
    """–û—Ç–∫–ª—é—á–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π"""
    os.environ["SHOW_AGENT_REASONING"] = "false"
    os.environ["SHOW_CRITIC_REASONING"] = "false"
    print("üîá –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω—ã")